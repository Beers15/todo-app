{"version":3,"sources":["components/header.js","hooks/form.js","context/settings.js","components/todoItem.js","components/list.js","components/itemForm.js","components/home.js","components/settingsForm.js","app.js","index.js"],"names":["Header","props","className","to","incomplete","useForm","callback","useState","values","setValues","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","SettingsContext","React","createContext","Settings","showCompleted","setCompleted","numItemsPerPage","setNumItemsPerPage","sortBy","setSortBy","initialRender","isInitialRender","useEffect","settings","localStorage","setItem","JSON","stringify","getItem","parse","console","log","Provider","children","TodoItem","interactive","elevation","Elevation","TWO","item","text","assignee","difficulty","complete","toString","onClick","toggleComplete","id","icon","intent","deleteItem","List","useContext","startIndex","setStartIndex","displayList","list","sort","a","b","aDifficulty","aAssignee","bAssignee","localeCompare","slice","map","key","filter","length","ItemForm","onSubmit","minimal","onChange","type","placeholder","defaultValue","min","max","Home","uuid","includes","alert","setList","incompleteCount","setIncomplete","document","title","items","SettingsForm","userInput","selectedSortRadioBtn","setSelectedSortRadioBtn","selectedCompleteRadioBtn","setSelectedCompleteRadioBtn","htmlFor","label","selectedValue","e","App","exact","path","Main","Component","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c66c4758.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n  return (\n    <nav className=\"bp3-navbar bp3-light\" data-testid=\"header\">\n      <div className=\"nav-style\">\n        <div className=\"bp3-navbar-group bp3-align-left\">\n          <div className=\"nav-heading bp3-icon-list-detail-view\"><Link to=\"/\"> To Do List</Link></div>\n        </div>\n        <div className=\"bp3-navbar-group bp3-align-right\">\n          <Link to=\"/settings\">Settings</Link>\n          <span className=\"bp3-navbar-divider\"></span>\n          <span className=\"bp3-icon-tick\"> {props.incomplete} items pending</span>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React, { useState, useEffect } from 'react';\n\n\nexport const SettingsContext = React.createContext();\n\nconst Settings = (props) => {\n  const [ showCompleted, setCompleted ] = useState(false);\n  const [ numItemsPerPage, setNumItemsPerPage ] = useState(3);\n  const [ sortBy, setSortBy ] = useState('assignee');\n  //to not overwrite local storage on first render\n  const [ initialRender, isInitialRender ] = useState(true);\n\n  useEffect(() => {\n    if(!initialRender) {\n      //update local storage with user settings every time they change a setting\n      let settings = [showCompleted, numItemsPerPage, sortBy];\n      localStorage.setItem('settings', JSON.stringify(settings));\n    } else {\n      isInitialRender(false);\n    }\n  }, [showCompleted, numItemsPerPage, sortBy]);\n\n  useEffect(() => {\n    if(localStorage.getItem('settings')) {\n      let settings = JSON.parse(localStorage.getItem('settings'));\n      console.log(\"SETTINGS FROM LAST TIME: \", settings[0], settings[1], settings[2]);\n      setCompleted(settings[0] || false);\n      setNumItemsPerPage(settings[1] || 3);\n      setSortBy(settings[2] || 'difficultyHighToLow');\n    }\n  }, []);\n\n  const values = {\n    showCompleted,\n    setCompleted,\n    numItemsPerPage,\n    setNumItemsPerPage,\n    sortBy,\n    setSortBy,\n  }\n  \n  return (\n    <SettingsContext.Provider value={values}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default Settings;","import React from 'react';\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\n\nconst TodoItem = (props) => {\n  return (\n    <Card className=\"todo-item-card\" interactive={true} elevation={Elevation.TWO} data-testid=\"todoItem\">\n      <h4>Task: {props.item.text}</h4>\n      <p><small>Assigned to: {props.item.assignee}</small></p>\n      <p><small>Difficulty: {props.item.difficulty}</small></p>\n      <p><small>Complete: {props.item.complete.toString()}</small></p>\n      {!props.item.complete && (<Button onClick={() => props.toggleComplete(props.item.id)} icon=\"tick\" intent=\"success\">Mark Complete</Button>)}\n      {' '}<Button onClick={() => props.deleteItem(props.item.id)} icon=\"cross\" intent=\"danger\">Delete</Button>\n    </Card>\n  )\n}\n\nexport default TodoItem;\n","import React from 'react'\nimport { useContext, useState } from 'react';\nimport { SettingsContext } from '../context/settings';\nimport { Button } from \"@blueprintjs/core\";\nimport TodoItem from './todoItem';\n\nconst List = (props) => {\n  const settings = useContext(SettingsContext);\n  let [startIndex, setStartIndex] = useState(0);\n\n  const handleNextClick = () => {\n    setStartIndex(startIndex + (settings.numItemsPerPage));\n  }\n\n  const handlePrevClick = () => {\n    setStartIndex(startIndex - (settings.numItemsPerPage));\n  }\n\n  const displayList = (list) => {\n    //may add more later\n    if(settings.sortBy) {\n      switch(settings.sortBy) {\n        case 'difficultyLowToHigh':\n          list.sort((a, b) => {\n            let aDifficulty = a.difficulty || 0;\n            let bDifficulty = b.difficulty || 0;\n            return aDifficulty - bDifficulty;\n          });\n          break;\n      case 'difficultyHighToLow':\n        list.sort((a, b) => {\n          let aDifficulty = a.difficulty || 0;\n          let bDifficulty = b.difficulty || 0;\n          return bDifficulty - aDifficulty;\n        });\n        break;\n      case 'assignee':\n        list.sort((a, b) => {\n          let aAssignee = a.assignee || 'z';\n          let bAssignee = b.assignee || 'z';\n          return aAssignee.localeCompare(bAssignee);\n        });\n        break;\n      default:\n        break;\n      }\n    }\n\n    let display = list.slice(startIndex, startIndex + settings.numItemsPerPage).map((item, key) => (\n      <TodoItem key={key} deleteItem={props.deleteItem} toggleComplete={props.toggleComplete} item={item} />\n    ));\n\n    return display;\n  }\n\n  return (\n    <div className=\"list-margin\">\n      <div className=\"list-flex-container\">\n        {settings.showCompleted ? displayList(props.list) : displayList(props.list.filter((item) => {\n          if(item.complete == false) { \n            return true;\n          }\n        }))}\n      </div>\n      {startIndex > settings.numItemsPerPage - 1 && (\n          <Button onClick={handlePrevClick} icon=\"arrow-left\" intent=\"primary\">Previous Page</Button>\n        )}\n        {(props.list.length > settings.numItemsPerPage && startIndex < props.list.length - 1) && \n          (<Button onClick={handleNextClick} icon=\"arrow-right\" intent=\"primary\">Next Page</Button>\n        )}\n    </div>\n  )\n}\nexport default List;\n","import React from 'react'\nimport { Button, FormGroup, InputGroup, Card, Elevation } from \"@blueprintjs/core\";\n\nconst ItemForm = (props) => {\n  return (  \n      <form onSubmit={props.handleSubmit} data-testid=\"todo-form\">\n        <div className=\"bp3-callout bp3-intent-success form-caption\">\n          <h4 className=\"bp3-heading\">Add To Do Item</h4>\n          Get organized, get things done.\n        </div>\n\n        <Card interactive={false} elevation={Elevation.TWO}>\n          <FormGroup minimal={true}>\n            <span>To Do Item</span>\n            <InputGroup className=\"input-item\" onChange={props.handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" data-testid=\"item-details\" />\n\n            <span>Assigned To</span>\n            <InputGroup className=\"input-item\" onChange={props.handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" data-testid=\"item-assignee\" />\n            \n            <span className=\"slider-label\">Difficulty</span>\n            <br/>\n            <input className=\"slider\" onChange={props.handleChange} name=\"difficulty\" type=\"range\" defaultValue=\"3\" min={1} max={5} data-testid=\"item-difficulty\" />\n          \n            <br/><Button className=\"submit-btn\" type=\"submit\" intent=\"success\" data-testid=\"todo-submit-btn\">Add Item</Button>\n          </FormGroup>\n         </Card>\n      </form>\n   \n  )\n}\n\nexport default ItemForm;\n","import React, { useEffect } from 'react';\nimport useForm from '../hooks/form.js';\nimport List from './list.js';\nimport ItemForm from './itemForm.js';\n\nimport { v4 as uuid } from 'uuid';\n\nconst Home = (props) => {\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  function addItem(item) {\n    item.id = uuid();\n    item.complete = false;\n\n    if(!props.list.includes(item)) {\n      props.setList([...props.list, item]);\n    } else {\n      alert('Entry already exists')\n    }\n  }\n\n  function deleteItem(id) {\n    const items = props.list.filter( item => item.id !== id );\n    props.setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = props.list.map( item => {\n      if ( item.id == id ) {\n        item.complete = ! item.complete;\n      }\n      return item;\n    });\n\n    props.setList(items);\n  }\n\n  useEffect(() => {\n    let incompleteCount = props.list.filter(item => !item.complete).length;\n    props.setIncomplete(incompleteCount);\n    document.title = `To Do List: ${props.incomplete}`;\n  }, [props.list]);\n\n  useEffect(() => {\n    document.title = `To Do List: ${props.incomplete}`;\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <ItemForm \n          handleSubmit={handleSubmit} \n          handleChange={handleChange} \n        />\n      \n        {props.list.length > 0 && (<List list={props.list} deleteItem={deleteItem} toggleComplete={toggleComplete} /> )}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react'\nimport useForm from '../hooks/form.js';\nimport { useContext, useState } from 'react';\nimport { SettingsContext } from '../context/settings';\nimport { Button, FormGroup, InputGroup, Card, Elevation, RadioGroup, Radio } from \"@blueprintjs/core\";\n\nconst SettingsForm = () => {\n  const settings = useContext(SettingsContext);\n\n  const { handleChange, handleSubmit } = useForm(updateSettings);\n\n  const [selectedSortRadioBtn, setSelectedSortRadioBtn] = useState()\n  const [selectedCompleteRadioBtn, setSelectedCompleteRadioBtn] = useState()\n\n  function updateSettings(userInput) {\n    //update submitted values, or use old value if non provided\n    settings.setCompleted(userInput['Blueprint3.RadioGroup-0'] || settings.setCompleted);\n    settings.setSortBy(userInput['Blueprint3.RadioGroup-1'] || settings.sortBy);\n    settings.setNumItemsPerPage(userInput['itemsPerPage'] || settings.setNumItemsPerPage);\n\n    alert('Your settings have been applied!')\n  }\n\n  return (\n    <div className=\"flex-container\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"bp3-callout bp3-intent-success form-caption\">\n          <h4 className=\"bp3-heading\">Modify App Settings</h4>\n          Todo the Way You Want to\n        </div>\n\n        <Card interactive={false} elevation={Elevation.TWO}>\n          <FormGroup minimal={true}>\n            <label htmlFor=\"itemsPerPages\">Number of Todo Items Per Page</label>\n            <InputGroup type=\"number\" id=\"itemsPerPage\" name=\"itemsPerPage\" min=\"1\" max=\"20\" onChange={handleChange} />\n            <br />\n\n            <RadioGroup\n                label=\"Show Completed Items\"\n                onChange={handleChange}\n                selectedValue={selectedCompleteRadioBtn}\n              >\n              <Radio label=\"Yes! I want to keep track of what I've done.\" onClick={(e) => setSelectedCompleteRadioBtn(e.target.value)} value=\"true\" />\n              <Radio label=\"No! It's in the past.\" onClick={(e) => setSelectedCompleteRadioBtn(e.target.value)} value=\"false\"  />\n            </RadioGroup>\n            <br/>\n\n            <RadioGroup\n              label=\"Sort By\"\n              onChange={handleChange}\n              selectedValue={selectedSortRadioBtn}\n            >\n              <Radio label=\"Difficulty: High to Low\" onClick={(e) => setSelectedSortRadioBtn(e.target.value)} value=\"difficultyHighToLow\" />\n              <Radio label=\"Difficulty: Low to High\" onClick={(e) => setSelectedSortRadioBtn(e.target.value)} value=\"difficultyLowToHigh\"  />\n              <Radio label=\"Assignee\" onClick={(e) => setSelectedSortRadioBtn(e.target.value)} value=\"assignee\" />\n            </RadioGroup>\n          \n            <br/><Button className=\"submit-btn\" type=\"submit\" intent=\"success\">Confirm Changes</Button>\n          </FormGroup>\n        </Card>\n      </form>\n    </div>\n  );\n}\n\nexport default SettingsForm;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { useState } from 'react';\n\nimport Header from './components/header';\nimport Todo from './components/home';\nimport SettingsForm from './components/settingsForm';\nimport './app.scss';\n\nconst App = () => {\n  const [incomplete, setIncomplete] = useState([]);\n  const [list, setList] = useState([]);\n\n  return (\n    <Router>\n      <Header incomplete={incomplete} />\n      <Switch>\n        <Route exact path=\"/\">\n          <Todo \n            setIncomplete={setIncomplete} \n            incomplete={incomplete}\n            setList={setList}\n            list={list}  \n          />\n        </Route>\n        <Route path=\"/settings\">\n          <SettingsForm />\n        </Route>\n        <Route path=\"*\">\n          <Todo \n            setIncomplete={setIncomplete} \n            incomplete={incomplete}\n            setList={setList}\n            list={list}  \n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\nimport Settings from './context/settings';\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <Settings>\n        <App />\n      </Settings>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}