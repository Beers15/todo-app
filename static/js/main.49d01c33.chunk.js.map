{"version":3,"sources":["context/auth.js","components/auth.js","components/header.js","hooks/form.js","context/settings.js","components/todoItem.js","components/list.js","components/itemForm.js","components/home.js","components/loginForm.js","components/registerForm.js","components/loginAndRegister.js","components/settingsForm.js","app.js","index.js"],"names":["userPool","admin","password","username","role","capabilities","editor","writer","AuthContext","React","createContext","Auth","children","useState","loggedIn","setLoggedIn","user","setUser","useEffect","qs","URLSearchParams","window","location","search","cookieToken","cookie","load","token","get","validateToken","values","can","capability","includes","login","console","log","jwt","sign","process","REACT_APP_SECRET","setLoginState","logout","register","verify","e","save","Provider","value","props","isLoggedIn","useContext","canDo","settings","okToRender","condition","Header","auth","className","to","incomplete","onClick","useForm","callback","setValues","handleChange","event","persist","target","name","handleSubmit","preventDefault","SettingsContext","Settings","showCompleted","setCompleted","numItemsPerPage","setNumItemsPerPage","sortBy","setSortBy","initialRender","isInitialRender","localStorage","setItem","JSON","stringify","getItem","parse","TodoItem","interactive","elevation","Elevation","TWO","item","text","assignee","difficulty","complete","toString","toggleComplete","id","icon","intent","deleteItem","List","startIndex","setStartIndex","displayList","list","sort","a","b","aDifficulty","aAssignee","bAssignee","localeCompare","slice","map","key","filter","length","ItemForm","onSubmit","minimal","onChange","type","placeholder","defaultValue","min","max","Home","uuid","alert","setList","incompleteCount","setIncomplete","document","title","items","LoginForm","setUsername","setPassword","showAlert","setShowAlert","confirmButtonText","isOpen","loading","onClose","RegisterForm","LoginAndRegister","animate","panel","Expander","SettingsForm","userInput","selectedSortRadioBtn","setSelectedSortRadioBtn","selectedCompleteRadioBtn","setSelectedCompleteRadioBtn","htmlFor","label","selectedValue","App","exact","path","Main","Component","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.49d01c33.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport cookie from 'react-cookies';\nimport jwt from 'jsonwebtoken';\n\n/* This app doesn't have a backend, to include a DB. Registered users \n   will be added to this object, which doesn't persist on app restart\n   TODO: add bcrypt for passwords and persist to localstorage */\nconst userPool = {\n  admin: {password:'password', username: 'admin', role:'admin', capabilities:['create','read','update','delete']},\n  editor: { password: 'password', username: 'editor', role: 'editor', capabilities: ['read', 'create', 'update']},\n  writer: { password: 'password', username: 'writer', role: 'writer', capabilities: ['create', 'read']},\n};\n\nexport const AuthContext = React.createContext();\n\nconst Auth = ({children}) => {\n  const [ loggedIn, setLoggedIn ] = useState(false);\n  const [ user, setUser ] = useState({ capabilities: [] });\n\n  useEffect(() => {\n    const qs = new URLSearchParams(window.location.search);\n    const cookieToken = cookie.load('auth');\n    const token = qs.get('token') || cookieToken || null;\n    validateToken(token);\n  }, []);\n\n  const can = (capability) => {\n    return values?.user?.capabilities?.includes(capability);\n  }\n\n  const login = (username, password) => {\n    if(userPool[username]) {\n      //Create a \"good\" token, like you'd get from a server\n      const token = jwt.sign(userPool[username], process.env.REACT_APP_SECRET || 'SECRET');\n      let user = validateToken(token);\n      if(user && userPool[username].password === password) {\n        setLoginState(true, token, user);\n      }\n    } else {\n      console.log(\"INVALID LOGIN\");\n      return false;\n    }\n  }\n\n  const logout = () => {\n    setLoginState(false, null, {});\n  };\n\n  const register = (username, password) => {\n    if(userPool[username] || password === '' || username === '') {\n      return false;\n    } else {\n      userPool[username] = { username, password, role:'admin', capabilities:['create','read','update','delete'] }\n      const token = jwt.sign(userPool[username], process.env.REACT_APP_SECRET || 'SECRET');\n      let user = validateToken(token);\n      if(user) {\n        setLoginState(true, token, user);\n      }\n    }\n  }\n\n  let values = {\n    loggedIn,\n    user,\n    can,\n    login,\n    logout,\n    register,\n  };\n\n  const validateToken = token => {\n    try {\n      let user = jwt.verify(token, process.env.REACT_APP_SECRET || 'SECRET');\n      if(user) {\n        return user;\n      } else { \n        return false;\n      }\n      \n    }\n    catch(e) {\n      setLoginState(false, null, {});\n      console.log('Token Validation Error', e);\n      return false;\n    }\n  };\n\n  const setLoginState = (loggedIn, token, user) => {\n    cookie.save('auth', token);\n    setLoggedIn(loggedIn);\n    setUser(user);\n    //setToken(token);\n  };\n\n  return (\n    <AuthContext.Provider value={values}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default Auth;\n","import React, { useContext } from 'react';\nimport { When } from 'react-if';\n\nimport { AuthContext } from '../context/auth';\n\nconst Auth = (props) => {\n  const auth = useContext(AuthContext);\n\n  const isLoggedIn = auth.loggedIn;\n  const canDo = props.capability ? settings.can(props.capability) : true;\n  const okToRender = isLoggedIn && canDo;\n\n  return (\n    <When condition={okToRender}>\n      {props.children}\n    </When>\n  );\n}\n\nexport default Auth;","import React, { useContext } from 'react'\nimport { AuthContext } from '../context/auth';\nimport { When } from 'react-if';\nimport { Link } from 'react-router-dom';\nimport { Button } from \"@blueprintjs/core\";\n\nconst Header = (props) => {\n  const auth = useContext(AuthContext);\n\n  return (\n    <nav className=\"bp3-navbar bp3-light\" data-testid=\"header\">\n      <div className=\"nav-style\">\n        <div className=\"bp3-navbar-group bp3-align-left\">\n          <div className=\"nav-heading bp3-icon-list-detail-view\"><Link to=\"/\"> To Do List</Link></div>\n        </div>\n        <div className=\"bp3-navbar-group bp3-align-right\">\n          <When condition={auth.loggedIn}>\n            <Link to=\"/settings\" data-testid=\"settings\">Settings</Link>\n          </When>\n          <span className=\"bp3-navbar-divider\"></span>\n          <span className=\"bp3-icon-tick\"> {props.incomplete} items pending</span>\n          <span className=\"bp3-navbar-divider\"></span>\n          <When condition={auth.loggedIn}>\n            <Button data-testid=\"logout\" onClick={auth.logout}>Log Out</Button>\n          </When>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React, { useState, useEffect } from 'react';\n\n\nexport const SettingsContext = React.createContext();\n\nconst Settings = (props) => {\n  const [ showCompleted, setCompleted ] = useState(false);\n  const [ numItemsPerPage, setNumItemsPerPage ] = useState(3);\n  const [ sortBy, setSortBy ] = useState('assignee');\n  //to not overwrite local storage on first render\n  const [ initialRender, isInitialRender ] = useState(true);\n\n  useEffect(() => {\n    if(!initialRender) {\n      //update local storage with user settings every time they change a setting\n      let settings = [showCompleted, numItemsPerPage, sortBy];\n      localStorage.setItem('settings', JSON.stringify(settings));\n    } else {\n      isInitialRender(false);\n    }\n  }, [showCompleted, numItemsPerPage, sortBy]);\n\n  useEffect(() => {\n    if(localStorage.getItem('settings')) {\n      let settings = JSON.parse(localStorage.getItem('settings'));\n      console.log(\"SETTINGS FROM LAST TIME: \", settings[0], settings[1], settings[2]);\n      setCompleted(settings[0] || false);\n      setNumItemsPerPage(settings[1] || 3);\n      setSortBy(settings[2] || 'difficultyHighToLow');\n    }\n  }, []);\n\n  const values = {\n    showCompleted,\n    setCompleted,\n    numItemsPerPage,\n    setNumItemsPerPage,\n    sortBy,\n    setSortBy,\n  }\n  \n  return (\n    <SettingsContext.Provider value={values}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default Settings;","import React from 'react';\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\n\nconst TodoItem = (props) => {\n  return (\n    <Card className=\"todo-item-card\" interactive={true} elevation={Elevation.TWO} data-testid=\"todoItem\">\n      <h4>Task: {props.item.text}</h4>\n      <p data-testid=\"todo-assignee\"><small>Assigned to: {props.item.assignee}</small></p>\n      <p data-testid=\"todo-difficulty\"><small>Difficulty: {props.item.difficulty}</small></p>\n      <p data-testid=\"todo-completed\"><small>Complete: {props.item.complete.toString()}</small></p>\n      {!props.item.complete && (<Button onClick={() => props.toggleComplete(props.item.id)} icon=\"tick\" intent=\"success\">Mark Complete</Button>)}\n      {' '}<Button onClick={() => props.deleteItem(props.item.id)} icon=\"cross\" intent=\"danger\">Delete</Button>\n    </Card>\n  )\n}\n\nexport default TodoItem;\n","import React from 'react'\nimport { useContext, useState } from 'react';\nimport { SettingsContext } from '../context/settings';\nimport { Button } from \"@blueprintjs/core\";\nimport TodoItem from './todoItem';\n\nconst List = (props) => {\n  const settings = useContext(SettingsContext);\n  let [startIndex, setStartIndex] = useState(0);\n\n  const handleNextClick = () => {\n    setStartIndex(startIndex + (settings.numItemsPerPage));\n  }\n\n  const handlePrevClick = () => {\n    setStartIndex(startIndex - (settings.numItemsPerPage));\n  }\n\n  const displayList = (list) => {\n    //may add more later\n    if(settings.sortBy) {\n      switch(settings.sortBy) {\n        case 'difficultyLowToHigh':\n          list.sort((a, b) => {\n            let aDifficulty = a.difficulty || 0;\n            let bDifficulty = b.difficulty || 0;\n            return aDifficulty - bDifficulty;\n          });\n          break;\n      case 'difficultyHighToLow':\n        list.sort((a, b) => {\n          let aDifficulty = a.difficulty || 0;\n          let bDifficulty = b.difficulty || 0;\n          return bDifficulty - aDifficulty;\n        });\n        break;\n      case 'assignee':\n        list.sort((a, b) => {\n          let aAssignee = a.assignee || 'z';\n          let bAssignee = b.assignee || 'z';\n          return aAssignee.localeCompare(bAssignee);\n        });\n        break;\n      default:\n        break;\n      }\n    }\n\n    let display = list.slice(startIndex, startIndex + settings.numItemsPerPage).map((item, key) => (\n      <TodoItem key={key} deleteItem={props.deleteItem} toggleComplete={props.toggleComplete} item={item} />\n    ));\n\n    return display;\n  }\n\n  return (\n    <div className=\"list-margin\">\n      <div className=\"list-flex-container\">\n        {settings.showCompleted ? displayList(props.list) : displayList(props.list.filter((item) => {\n          if(item.complete == false) { \n            return true;\n          }\n        }))}\n      </div>\n      {startIndex > settings.numItemsPerPage - 1 && (\n          <Button onClick={handlePrevClick} icon=\"arrow-left\" intent=\"primary\">Previous Page</Button>\n        )}\n        {(props.list.length > settings.numItemsPerPage && startIndex < props.list.length - 1) && \n          (<Button onClick={handleNextClick} icon=\"arrow-right\" intent=\"primary\">Next Page</Button>\n        )}\n    </div>\n  )\n}\nexport default List;\n","import React from 'react'\nimport { Button, FormGroup, InputGroup, Card, Elevation } from \"@blueprintjs/core\";\n\nconst ItemForm = (props) => {\n  return (  \n      <form onSubmit={props.handleSubmit} data-testid=\"todo-form\">\n        <div className=\"bp3-callout bp3-intent-success form-caption\">\n          <h4 className=\"bp3-heading\">Add To Do Item</h4>\n          Get organized, get things done.\n        </div>\n\n        <Card interactive={false} elevation={Elevation.TWO}>\n          <FormGroup minimal={true}>\n            <span>To Do Item</span>\n            <InputGroup className=\"input-item\" onChange={props.handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" data-testid=\"item-details\" />\n\n            <span>Assigned To</span>\n            <InputGroup className=\"input-item\" onChange={props.handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" data-testid=\"item-assignee\" />\n            \n            <span className=\"slider-label\">Difficulty</span>\n            <br/>\n            <input className=\"slider\" onChange={props.handleChange} name=\"difficulty\" type=\"range\" defaultValue=\"3\" min={1} max={5} data-testid=\"item-difficulty\" />\n          \n            <br/><Button className=\"submit-btn\" type=\"submit\" intent=\"success\" data-testid=\"todo-submit-btn\">Add Item</Button>\n          </FormGroup>\n         </Card>\n      </form>\n   \n  )\n}\n\nexport default ItemForm;\n","import React, { useEffect } from 'react';\nimport useForm from '../hooks/form.js';\nimport List from './list.js';\nimport ItemForm from './itemForm.js';\n\nimport { v4 as uuid } from 'uuid';\n\nconst Home = (props) => {\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  useEffect(() => {\n    let incompleteCount = props.list.filter(item => !item.complete).length;\n    props.setIncomplete(incompleteCount);\n    document.title = `To Do List: ${props.incomplete}`;\n  }, [props.list]);\n\n  useEffect(() => {\n    document.title = `To Do List: ${props.incomplete}`;\n  }, []);\n\n  function addItem(item) {\n    item.id = uuid();\n    item.complete = false;\n\n    if(!props.list.includes(item)) {\n      props.setList([...props.list, item]);\n    } else {\n      alert('Entry already exists')\n    }\n  }\n\n  function deleteItem(id) {\n    const items = props.list.filter( item => item.id !== id );\n    props.setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = props.list.map( item => {\n      if ( item.id == id ) {\n        item.complete = ! item.complete;\n      }\n      return item;\n    });\n\n    props.setList(items);\n  }\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <ItemForm \n          handleSubmit={handleSubmit} \n          handleChange={handleChange} \n        />\n      \n        {props.list.length > 0 && (<List list={props.list} deleteItem={deleteItem} toggleComplete={toggleComplete} /> )}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import{ useState, useContext } from 'react';\nimport { AuthContext } from '../context/auth';\nimport { Button, InputGroup, Card, Elevation, Alert } from \"@blueprintjs/core\";\n\n\nconst LoginForm = () => {\n  const auth = useContext(AuthContext);\n\n  let [ username, setUsername ] = useState('');\n  let [ password, setPassword ] = useState('');\n  let [ showAlert, setShowAlert ] = useState(false); \n\n  const handleChange = e => {\n    if(e.target.name === 'username') {\n      setUsername(e.target.value);\n    }\n    if(e.target.name === 'password') {\n      setPassword(e.target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let validLogin = auth.login(username, password);\n    if(!validLogin) {\n      setShowAlert(true);\n    }\n  };\n\n  return ( \n    <>\n      <Card interactive={false} elevation={Elevation.TWO}>\n        <form onSubmit={handleSubmit}>\n          <InputGroup\n            data-testid=\"username-field\"\n            className=\"margin-1\"\n            placeholder=\"UserName\"\n            name=\"username\"\n            onChange={handleChange}\n          />\n          <InputGroup \n            data-testid=\"password-field\"\n            className=\"margin-1\"\n            placeholder=\"password\"\n            name=\"password\"\n            type=\"password\"\n            onChange={handleChange}\n          />\n          <Button className=\"submit-btn\" type=\"submit\" intent=\"success\" data-testid=\"login\">Login</Button>\n        </form>\n      </Card>\n      <Alert\n        confirmButtonText=\"X\"\n        isOpen={showAlert}\n        loading={false}\n        onClose={() => {setShowAlert(false)}}\n      >\n        <p>Unable to login with those credentials. Please try again.</p>\n      </Alert>\n    </>\n  );\n}\n\n\nexport default LoginForm;\n","import{ useState, useContext } from 'react';\nimport { AuthContext } from '../context/auth';\nimport { Button, InputGroup, Card, Elevation, Alert } from \"@blueprintjs/core\";\n\nconst RegisterForm = () => {\n  const auth = useContext(AuthContext);\n\n  let [ username, setUsername ] = useState('');\n  let [ password, setPassword ] = useState('');\n  let [ showAlert, setShowAlert ] = useState(false); \n\n  const handleChange = e => {\n    if(e.target.name === 'username') {\n      setUsername(e.target.value);\n    }\n    if(e.target.name === 'password') {\n      setPassword(e.target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let validRegister = auth.register(username, password);\n    if(!validRegister) {\n      setShowAlert(true);\n    }\n  };\n\n  return (\n    <>\n      <Card interactive={false} elevation={Elevation.TWO}>\n        <form onSubmit={handleSubmit}>\n          <InputGroup\n            data-testid=\"username-field-reg\"\n            className=\"margin-1\"\n            placeholder=\"UserName\"\n            name=\"username\"\n            onChange={handleChange}\n          />\n          <InputGroup \n            data-testid=\"password-field-reg\"\n            className=\"margin-1\"\n            placeholder=\"password\"\n            name=\"password\"\n            type=\"password\"\n            onChange={handleChange}\n          />\n          <Button className=\"submit-btn\" type=\"submit\" intent=\"success\" data-testid=\"register\">Register</Button>\n        </form>\n      </Card>\n      <Alert\n        confirmButtonText=\"X\"\n        isOpen={showAlert}\n        loading={false}\n        onClose={() => {setShowAlert(false)}}\n      >\n        <p>Unable to make an account with those credentials. Please try another username.</p>\n      </Alert>\n    </>\n  );\n}\n\nexport default RegisterForm;\n","import React, { useContext } from 'react';\nimport { When } from 'react-if';\nimport { Tab, Tabs } from \"@blueprintjs/core\";\nimport { AuthContext } from '../context/auth';\n\nimport LoginForm from './loginForm';\nimport RegisterForm from './registerForm';\n\nconst LoginAndRegister = () =>  {\n  const auth = useContext(AuthContext);\n\n  return (\n    <div className=\"flex-container\">\n      <When condition={!auth.loggedIn}>\n        <Tabs animate={true}>\n          <Tab id=\"login\" title=\"Login\" panel={<LoginForm />} data-testid=\"login-tab\" />\n          <Tab id=\"register\" title=\"Register\" panel={<RegisterForm />} data-testid=\"register-tab\" />\n          <Tabs.Expander />\n        </Tabs>\n      </When>\n    </div>\n  );\n}\n\nexport default LoginAndRegister;","import React from 'react'\nimport useForm from '../hooks/form.js';\nimport { useContext, useState } from 'react';\nimport { SettingsContext } from '../context/settings';\nimport { Button, FormGroup, InputGroup, Card, Elevation, RadioGroup, Radio, Alert } from \"@blueprintjs/core\";\n\nconst SettingsForm = () => {\n  const settings = useContext(SettingsContext);\n\n  const { handleChange, handleSubmit } = useForm(updateSettings);\n\n  const [selectedSortRadioBtn, setSelectedSortRadioBtn] = useState();\n  const [selectedCompleteRadioBtn, setSelectedCompleteRadioBtn] = useState();\n  let [ showAlert, setShowAlert ] = useState(false); \n\n  function updateSettings(userInput) {\n    //update submitted values, or use old value if non provided\n    settings.setCompleted(userInput['Blueprint3.RadioGroup-0'] || settings.setCompleted);\n    settings.setSortBy(userInput['Blueprint3.RadioGroup-1'] || settings.sortBy);\n    settings.setNumItemsPerPage(userInput['itemsPerPage'] || settings.setNumItemsPerPage);\n\n    setShowAlert(true);\n  }\n\n  return (\n    <div className=\"flex-container\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"bp3-callout bp3-intent-success form-caption\">\n          <h4 className=\"bp3-heading\">Modify App Settings</h4>\n          Todo the Way You Want to\n        </div>\n\n        <Card interactive={false} elevation={Elevation.TWO}>\n          <FormGroup minimal={true}>\n            <label htmlFor=\"itemsPerPages\">Number of Todo Items Per Page</label>\n            <InputGroup type=\"number\" id=\"itemsPerPage\" name=\"itemsPerPage\" min=\"1\" max=\"20\" onChange={handleChange} data-testid=\"settings-itemsPerPage\" />\n            <br />\n\n            <RadioGroup\n              label=\"Show Completed Items\"\n              onChange={handleChange}\n              selectedValue={selectedCompleteRadioBtn}\n            >\n              <Radio label=\"Yes! I want to keep track of what I've done.\" onClick={(e) => setSelectedCompleteRadioBtn(e.target.value)} value=\"true\" data-testid=\"settings-showCompleted\" />\n              <Radio label=\"No! It's in the past.\" onClick={(e) => setSelectedCompleteRadioBtn(e.target.value)} value=\"false\"  />\n            </RadioGroup>\n            <br/>\n\n            <RadioGroup\n              label=\"Sort By\"\n              onChange={handleChange}\n              selectedValue={selectedSortRadioBtn}\n            >\n              <Radio label=\"Difficulty: High to Low\" onClick={(e) => setSelectedSortRadioBtn(e.target.value)} value=\"difficultyHighToLow\" data-testid=\"settings-sortBy\" />\n              <Radio label=\"Difficulty: Low to High\" onClick={(e) => setSelectedSortRadioBtn(e.target.value)} value=\"difficultyLowToHigh\"  />\n              <Radio label=\"Assignee\" onClick={(e) => setSelectedSortRadioBtn(e.target.value)} value=\"assignee\" />\n            </RadioGroup>\n          \n            <br/><Button className=\"submit-btn\" type=\"submit\" intent=\"success\" data-testid=\"settings-submit\">Confirm Changes</Button>\n          </FormGroup>\n        </Card>\n      </form>\n      <Alert\n        confirmButtonText=\"X\"\n        isOpen={showAlert}\n        loading={false}\n        onClose={() => {setShowAlert(false)}}\n      >\n        <p>Your settings have been applied!</p>\n      </Alert>\n    </div>\n  );\n}\n\nexport default SettingsForm;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { useState } from 'react';\n\nimport Auth from './components/auth';\nimport Header from './components/header';\nimport Home from './components/home';\nimport LoginAndRegister from './components/loginAndRegister';\nimport SettingsForm from './components/settingsForm';\n\nimport './app.scss';\n\nconst App = () => {\n  const [incomplete, setIncomplete] = useState([]);\n  const [list, setList] = useState([]);\n\n  return (\n    <Router>\n      <Header incomplete={incomplete} />\n      <LoginAndRegister data-testid=\"login-and-register\" />\n      <Switch>\n        <Route exact path=\"/\">\n          <Auth>\n            <Home \n              setIncomplete={setIncomplete} \n              incomplete={incomplete}\n              setList={setList}\n              list={list}  \n            />\n          </Auth>\n        </Route>\n        <Route path=\"/settings\">\n          <Auth>\n            <SettingsForm />\n          </Auth>\n        </Route>\n        <Route path=\"*\">\n          <Auth>\n            <Home \n              setIncomplete={setIncomplete} \n              incomplete={incomplete}\n              setList={setList}\n              list={list}  \n            />\n          </Auth>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\nimport SettingsProvider from './context/settings';\nimport AuthProvider from './context/auth';\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <SettingsProvider>\n        <AuthProvider>\n          <App />\n        </AuthProvider>\n      </SettingsProvider>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}